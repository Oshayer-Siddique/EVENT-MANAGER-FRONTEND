package com.oshayer.event_manager.ticketing.controller;

import com.oshayer.event_manager.ticketing.dto.*;
import com.oshayer.event_manager.ticketing.service.TicketService;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.*;

@RestController
@RequestMapping("/api/tickets")
@RequiredArgsConstructor
public class TicketController {

    private final TicketService ticketService;

    @PostMapping("/reserve")
    public ResponseEntity<TicketResponse> reserve(@Valid @RequestBody TicketCreateRequest req) {
        return ResponseEntity.ok(ticketService.createPending(req));
    }

    @PostMapping("/issue/{ticketId}")
    public ResponseEntity<TicketResponse> issue(@PathVariable java.util.UUID ticketId) {
        return ResponseEntity.ok(ticketService.issue(ticketId));
    }

    @PostMapping("/checkin/{ticketId}")
    public ResponseEntity<TicketResponse> checkIn(@PathVariable java.util.UUID ticketId,
                                                  @Valid @RequestBody TicketCheckInRequest req) {
        return ResponseEntity.ok(ticketService.checkIn(ticketId, req));
    }

    @PostMapping("/refund/{ticketId}")
    public ResponseEntity<TicketResponse> refund(@PathVariable java.util.UUID ticketId,
                                                 @Valid @RequestBody TicketRefundRequest req) {
        return ResponseEntity.ok(ticketService.refund(ticketId, req));
    }

    @GetMapping("/{ticketId}")
    public ResponseEntity<TicketResponse> get(@PathVariable java.util.UUID ticketId) {
        return ResponseEntity.ok(ticketService.get(ticketId));
    }

    @GetMapping
    public ResponseEntity<List<TicketResponse>> listTickets(
            @RequestParam(required = false) UUID eventId,
            @RequestParam(required = false) UUID buyerId
    ) {
        if (eventId != null) {
            return ResponseEntity.ok(ticketService.listByEvent(eventId));
        }
        if (buyerId != null) {
            return ResponseEntity.ok(ticketService.listByBuyer(buyerId));
        }
        // Consider returning a 400 Bad Request if no filter is provided, or defaulting to all tickets if that's desired.
        return ResponseEntity.ok(Collections.emptyList());
    }
}


package com.oshayer.event_manager.ticketing.controller;

import com.oshayer.event_manager.ticketing.dto.*;
import com.oshayer.event_manager.ticketing.service.ReservationHoldService;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.*;

@RestController
@RequestMapping("/api/holds")
@RequiredArgsConstructor
public class ReservationHoldController {

    private final ReservationHoldService holdService;

    @PostMapping
    public ResponseEntity<HoldResponse> create(@Valid @RequestBody HoldCreateRequest req) {
        return ResponseEntity.ok(holdService.create(req));
    }

    @PostMapping("/release")
    public ResponseEntity<HoldResponse> release(@Valid @RequestBody HoldReleaseRequest req) {
        return ResponseEntity.ok(holdService.release(req));
    }

    @PostMapping("/convert")
    public ResponseEntity<HoldResponse> convert(@Valid @RequestBody HoldConvertRequest req) {
        return ResponseEntity.ok(holdService.convert(req));
    }

    @GetMapping("/{holdId}")
    public ResponseEntity<HoldResponse> get(@PathVariable java.util.UUID holdId) {
        return ResponseEntity.ok(holdService.get(holdId));
    }

    @GetMapping("/events/{eventId}")
    public ResponseEntity<List<HoldResponse>> listActive(@PathVariable java.util.UUID eventId) {
        return ResponseEntity.ok(holdService.listActive(eventId));
    }
}


package com.oshayer.event_manager.events.controller;

import com.oshayer.event_manager.events.dto.CreateEventRequest;
import com.oshayer.event_manager.events.dto.EventResponse;
import com.oshayer.event_manager.events.dto.EventTicketDetailsResponse;
import com.oshayer.event_manager.events.dto.UpdateEventRequest;
import com.oshayer.event_manager.events.service.EventService;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.web.PageableDefault;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.net.URI;
import java.util.UUID;

@RestController
@RequestMapping("/api/events")
@RequiredArgsConstructor
public class EventController {

    private final EventService eventService;

    // CREATE
    @PostMapping
    public ResponseEntity<EventResponse> create(@Valid @RequestBody CreateEventRequest req) {
        EventResponse created = eventService.create(req);
        return ResponseEntity
                .created(URI.create("/api/events/" + created.getId()))
                .body(created);
    }

    // GET (by id)
    @GetMapping("/{id}")
    public ResponseEntity<EventResponse> get(@PathVariable UUID id) {
        return ResponseEntity.ok(eventService.get(id));
    }

    // Tickets + assets
    @GetMapping("/{id}/ticket-details")
    public ResponseEntity<EventTicketDetailsResponse> getTicketDetails(@PathVariable UUID id) {
        return ResponseEntity.ok(eventService.getTicketDetails(id));
    }

    // LIST (paged)
    @GetMapping
    public ResponseEntity<Page<EventResponse>> list(
            @PageableDefault(size = 20, sort = "eventStart") Pageable pageable) {
        return ResponseEntity.ok(eventService.list(pageable));
    }

    // UPDATE (full/partial via PUT â€“ your UpdateEventRequest is partial-friendly)
    @PutMapping("/{id}")
    public ResponseEntity<EventResponse> update(
            @PathVariable UUID id,
            @Valid @RequestBody UpdateEventRequest req) {
        return ResponseEntity.ok(eventService.update(id, req));
    }

    // DELETE
    @DeleteMapping("/{id}")
    public ResponseEntity<Void> delete(@PathVariable UUID id) {
        eventService.delete(id);
        return ResponseEntity.noContent().build();
    }
}

package com.oshayer.event_manager.ticketing.dto;

import jakarta.validation.constraints.*;
import lombok.*;
import java.util.UUID;

@Data
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class HoldConvertRequest {
    @NotNull private UUID holdId;
    @NotNull private UUID paymentId;
}

package com.oshayer.event_manager.ticketing.dto;

import jakarta.validation.constraints.Future;
import jakarta.validation.constraints.NotEmpty;
import jakarta.validation.constraints.NotNull;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.time.OffsetDateTime;
import java.util.List;
import java.util.UUID;

@Data
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class HoldCreateRequest {
    @NotNull private UUID eventId;
    private UUID buyerId; // nullable = guest allowed

    @NotEmpty
    private List<UUID> seatIds; // The specific seats to be held

    @Future @NotNull private OffsetDateTime expiresAt;
}



package com.oshayer.event_manager.ticketing.dto;

import jakarta.validation.constraints.*;
import lombok.*;
import java.util.UUID;

@Data
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class HoldReleaseRequest {
    @NotNull private UUID holdId;
    private String reason;
}


package com.oshayer.event_manager.ticketing.dto;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.time.OffsetDateTime;
import java.util.List;
import java.util.UUID;

@Data
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class HoldResponse {
    private UUID id;
    private UUID eventId;
    private UUID buyerId;
    private String status;
    private List<HeldSeatInfo> heldSeats;
    private OffsetDateTime expiresAt;
    private UUID finalizedPaymentId;
    private OffsetDateTime createdAt;
    private OffsetDateTime updatedAt;

    @Data
    @NoArgsConstructor
    @AllArgsConstructor
    @Builder
    public static class HeldSeatInfo {
        private UUID seatId;
        private String seatLabel;
        private String tierCode;
    }
}



package com.oshayer.event_manager.ticketing.dto;

import jakarta.validation.constraints.*;
import lombok.*;
import java.util.UUID;

@Data
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class TicketCheckInRequest {
    @NotNull private UUID checkerId;
    private String gate;
}


package com.oshayer.event_manager.ticketing.dto;

import jakarta.validation.constraints.Email;
import jakarta.validation.constraints.NotNull;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.time.OffsetDateTime;
import java.util.UUID;

@Data
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class TicketCreateRequest {
    @NotNull private UUID eventId;
    @NotNull private UUID seatId; // The ID of the desired SeatEntity
    @NotNull private UUID buyerId;

    // Optional reservation time for pending tickets
    private OffsetDateTime reservedUntil;

    // Optional holder info if different from buyer
    private String holderName;
    @Email private String holderEmail;
}


package com.oshayer.event_manager.ticketing.dto;

import jakarta.validation.constraints.*;
import lombok.*;
import java.math.BigDecimal;

@Data
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class TicketRefundRequest {
    @NotNull @DecimalMin("0.00")
    private BigDecimal refundAmount;
}



package com.oshayer.event_manager.ticketing.dto;

import lombok.*;

import java.math.BigDecimal;
import java.time.OffsetDateTime;
import java.util.UUID;

@Data
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class TicketResponse {
    private UUID id;
    private String status;

    // Flattened from related entities for convenience
    private UUID eventId;
    private UUID buyerId;
    private UUID seatId;
    private String seatLabel;
    private String tierCode;
    private BigDecimal price;

    // Verification and Holder Info
    private String qrCode;
    private String verificationCode;
    private String holderName;
    private String holderEmail;

    // Check-in Info
    private String gate;
    private UUID checkerId;
    private OffsetDateTime checkedInAt;

    // Lifecycle Timestamps
    private OffsetDateTime reservedUntil;
    private OffsetDateTime issuedAt;

    // Refund Info
    private BigDecimal refundAmount;
    private OffsetDateTime refundedAt;

    // Audit Timestamps
    private OffsetDateTime createdAt;
    private OffsetDateTime updatedAt;
}

package com.oshayer.event_manager.events.dto;

import lombok.*;
import java.time.ZonedDateTime;
import java.util.List;
import java.util.UUID;

@Data @NoArgsConstructor @AllArgsConstructor @Builder
public class EventResponse {
    private UUID id;

    private String typeCode;
    private String typeName;
    private String eventCode;
    private String eventName;
    private String eventDescription;
    private String privacyPolicy;
    private ZonedDateTime eventStart;
    private ZonedDateTime eventEnd;

    private UUID venueId;
    private String venueName;
    private UUID seatLayoutId;

    private UUID eventManager;
    private UUID eventOperator1;
    private UUID eventOperator2;
    private UUID eventChecker1;
    private UUID eventChecker2;

    private List<UUID> organizerIds;
    private List<String> imageUrls;

    private List<EventTicketTierResponse> ticketTiers;

    private List<UUID> artistIds;
    private List<UUID> sponsorIds;

}


package com.oshayer.event_manager.events.dto;

import jakarta.validation.constraints.DecimalMin;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.PositiveOrZero;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.math.BigDecimal;

@Data @NoArgsConstructor @AllArgsConstructor @Builder
public class CreateEventTicketTierRequest {
    @NotBlank private String tierCode;
    @NotBlank private String tierName;
    @NotNull @PositiveOrZero private Integer totalQuantity;
    @NotNull @DecimalMin(value = "0.0", inclusive = true) private BigDecimal price;
    @NotNull @DecimalMin(value = "0.0", inclusive = true) private BigDecimal cost;
    @Builder.Default private Boolean visible = Boolean.TRUE;
}


package com.oshayer.event_manager.events.dto;

import jakarta.validation.constraints.DecimalMin;
import jakarta.validation.constraints.PositiveOrZero;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.math.BigDecimal;
import java.util.UUID;

@Data @NoArgsConstructor @AllArgsConstructor @Builder
public class UpdateEventTicketTierRequest {
    private UUID id; // ID is needed to identify which tier to update
    private String tierCode;
    private String tierName;
    @PositiveOrZero private Integer totalQuantity;
    @DecimalMin(value = "0.0", inclusive = true) private BigDecimal price;
    @DecimalMin(value = "0.0", inclusive = true) private BigDecimal cost;
    private Boolean visible;
}


package com.oshayer.event_manager.events.dto;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.util.List;
import java.util.UUID;

@Data
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class EventTicketDetailsResponse {
    private UUID eventId;
    private List<EventTicketTierResponse> ticketTiers;
    private List<String> imageUrls;
    private SeatLayoutSummaryResponse seatLayout;
}


package com.oshayer.event_manager.events.dto;

import jakarta.validation.constraints.DecimalMin;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.PositiveOrZero;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.math.BigDecimal;

@Data @NoArgsConstructor @AllArgsConstructor @Builder
public class CreateEventTicketTierRequest {
    @NotBlank private String tierCode;
    @NotBlank private String tierName;
    @NotNull @PositiveOrZero private Integer totalQuantity;
    @NotNull @DecimalMin(value = "0.0", inclusive = true) private BigDecimal price;
    @NotNull @DecimalMin(value = "0.0", inclusive = true) private BigDecimal cost;
    @Builder.Default private Boolean visible = Boolean.TRUE;
}


package com.oshayer.event_manager.events.dto;

import jakarta.validation.constraints.DecimalMin;
import jakarta.validation.constraints.PositiveOrZero;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.math.BigDecimal;
import java.util.UUID;

@Data @NoArgsConstructor @AllArgsConstructor @Builder
public class UpdateEventTicketTierRequest {
    private UUID id; // ID is needed to identify which tier to update
    private String tierCode;
    private String tierName;
    @PositiveOrZero private Integer totalQuantity;
    @DecimalMin(value = "0.0", inclusive = true) private BigDecimal price;
    @DecimalMin(value = "0.0", inclusive = true) private BigDecimal cost;
    private Boolean visible;
}


